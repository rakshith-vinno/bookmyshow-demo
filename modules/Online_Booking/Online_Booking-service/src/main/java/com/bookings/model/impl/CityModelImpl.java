/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bookings.model.impl;

import com.bookings.model.City;
import com.bookings.model.CityModel;
import com.bookings.model.CitySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the City service. Represents a row in the &quot;City&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CityImpl
 * @generated
 */
@JSON(strict = true)
public class CityModelImpl extends BaseModelImpl<City> implements CityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a city model instance should use the <code>City</code> interface instead.
	 */
	public static final String TABLE_NAME = "City";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"city_id", Types.BIGINT},
		{"city_Name", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city_Name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table City (uuid_ VARCHAR(75) null,city_id LONG not null primary key,city_Name VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table City";

	public static final String ORDER_BY_JPQL = " ORDER BY city.city_id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY City.city_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bookings.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.bookings.model.City"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bookings.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.bookings.model.City"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		com.bookings.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.com.bookings.model.City"),
		true);

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long CITY_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static City toModel(CitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		City model = new CityImpl();

		model.setUuid(soapModel.getUuid());
		model.setCity_id(soapModel.getCity_id());
		model.setCity_Name(soapModel.getCity_Name());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<City> toModels(CitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<City> models = new ArrayList<City>(soapModels.length);

		for (CitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.bookings.service.util.ServiceProps.get(
			"lock.expiration.time.com.bookings.model.City"));

	public CityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _city_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCity_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _city_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return City.class;
	}

	@Override
	public String getModelClassName() {
		return City.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<City, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((City)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<City, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<City, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((City)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<City, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<City, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, City>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			City.class.getClassLoader(), City.class, ModelWrapper.class);

		try {
			Constructor<City> constructor =
				(Constructor<City>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<City, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<City, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<City, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<City, Object>>();
		Map<String, BiConsumer<City, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<City, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<City, Object>() {

				@Override
				public Object apply(City city) {
					return city.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<City, Object>() {

				@Override
				public void accept(City city, Object uuidObject) {
					city.setUuid((String)uuidObject);
				}

			});
		attributeGetterFunctions.put(
			"city_id",
			new Function<City, Object>() {

				@Override
				public Object apply(City city) {
					return city.getCity_id();
				}

			});
		attributeSetterBiConsumers.put(
			"city_id",
			new BiConsumer<City, Object>() {

				@Override
				public void accept(City city, Object city_idObject) {
					city.setCity_id((Long)city_idObject);
				}

			});
		attributeGetterFunctions.put(
			"city_Name",
			new Function<City, Object>() {

				@Override
				public Object apply(City city) {
					return city.getCity_Name();
				}

			});
		attributeSetterBiConsumers.put(
			"city_Name",
			new BiConsumer<City, Object>() {

				@Override
				public void accept(City city, Object city_NameObject) {
					city.setCity_Name((String)city_NameObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCity_id() {
		return _city_id;
	}

	@Override
	public void setCity_id(long city_id) {
		_city_id = city_id;
	}

	@JSON
	@Override
	public String getCity_Name() {
		if (_city_Name == null) {
			return "";
		}
		else {
			return _city_Name;
		}
	}

	@Override
	public void setCity_Name(String city_Name) {
		_city_Name = city_Name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, City.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public City toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, City>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CityImpl cityImpl = new CityImpl();

		cityImpl.setUuid(getUuid());
		cityImpl.setCity_id(getCity_id());
		cityImpl.setCity_Name(getCity_Name());

		cityImpl.resetOriginalValues();

		return cityImpl;
	}

	@Override
	public int compareTo(City city) {
		long primaryKey = city.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof City)) {
			return false;
		}

		City city = (City)object;

		long primaryKey = city.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<City> toCacheModel() {
		CityCacheModel cityCacheModel = new CityCacheModel();

		cityCacheModel.uuid = getUuid();

		String uuid = cityCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cityCacheModel.uuid = null;
		}

		cityCacheModel.city_id = getCity_id();

		cityCacheModel.city_Name = getCity_Name();

		String city_Name = cityCacheModel.city_Name;

		if ((city_Name != null) && (city_Name.length() == 0)) {
			cityCacheModel.city_Name = null;
		}

		return cityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<City, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((City)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<City, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((City)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, City>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _city_id;
	private String _city_Name;
	private long _columnBitmask;
	private City _escapedModel;

}