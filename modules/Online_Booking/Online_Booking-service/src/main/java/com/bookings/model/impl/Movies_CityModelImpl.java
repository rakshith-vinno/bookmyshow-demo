/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bookings.model.impl;

import com.bookings.model.Movies_City;
import com.bookings.model.Movies_CityModel;
import com.bookings.model.Movies_CitySoap;
import com.bookings.service.persistence.Movies_CityPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Movies_City service. Represents a row in the &quot;Movies_City&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Movies_CityModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Movies_CityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Movies_CityImpl
 * @generated
 */
@JSON(strict = true)
public class Movies_CityModelImpl
	extends BaseModelImpl<Movies_City> implements Movies_CityModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a movies_ city model instance should use the <code>Movies_City</code> interface instead.
	 */
	public static final String TABLE_NAME = "Movies_City";

	public static final Object[][] TABLE_COLUMNS = {
		{"movie_id", Types.BIGINT}, {"city_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("movie_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Movies_City (movie_id LONG not null,city_id LONG not null,primary key (movie_id, city_id))";

	public static final String TABLE_SQL_DROP = "drop table Movies_City";

	public static final String ORDER_BY_JPQL =
		" ORDER BY movies_City.id.movie_id ASC, movies_City.id.city_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Movies_City.movie_id ASC, Movies_City.city_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bookings.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.com.bookings.model.Movies_City"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.bookings.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.com.bookings.model.Movies_City"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Movies_City toModel(Movies_CitySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Movies_City model = new Movies_CityImpl();

		model.setMovie_id(soapModel.getMovie_id());
		model.setCity_id(soapModel.getCity_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Movies_City> toModels(Movies_CitySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Movies_City> models = new ArrayList<Movies_City>(
			soapModels.length);

		for (Movies_CitySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.bookings.service.util.ServiceProps.get(
			"lock.expiration.time.com.bookings.model.Movies_City"));

	public Movies_CityModelImpl() {
	}

	@Override
	public Movies_CityPK getPrimaryKey() {
		return new Movies_CityPK(_movie_id, _city_id);
	}

	@Override
	public void setPrimaryKey(Movies_CityPK primaryKey) {
		setMovie_id(primaryKey.movie_id);
		setCity_id(primaryKey.city_id);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Movies_CityPK(_movie_id, _city_id);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Movies_CityPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Movies_City.class;
	}

	@Override
	public String getModelClassName() {
		return Movies_City.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Movies_City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Movies_City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Movies_City, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Movies_City)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Movies_City, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Movies_City, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Movies_City)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Movies_City, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Movies_City, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Movies_City>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Movies_City.class.getClassLoader(), Movies_City.class,
			ModelWrapper.class);

		try {
			Constructor<Movies_City> constructor =
				(Constructor<Movies_City>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Movies_City, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Movies_City, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Movies_City, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Movies_City, Object>>();
		Map<String, BiConsumer<Movies_City, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Movies_City, ?>>();

		attributeGetterFunctions.put(
			"movie_id",
			new Function<Movies_City, Object>() {

				@Override
				public Object apply(Movies_City movies_City) {
					return movies_City.getMovie_id();
				}

			});
		attributeSetterBiConsumers.put(
			"movie_id",
			new BiConsumer<Movies_City, Object>() {

				@Override
				public void accept(
					Movies_City movies_City, Object movie_idObject) {

					movies_City.setMovie_id((Long)movie_idObject);
				}

			});
		attributeGetterFunctions.put(
			"city_id",
			new Function<Movies_City, Object>() {

				@Override
				public Object apply(Movies_City movies_City) {
					return movies_City.getCity_id();
				}

			});
		attributeSetterBiConsumers.put(
			"city_id",
			new BiConsumer<Movies_City, Object>() {

				@Override
				public void accept(
					Movies_City movies_City, Object city_idObject) {

					movies_City.setCity_id((Long)city_idObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMovie_id() {
		return _movie_id;
	}

	@Override
	public void setMovie_id(long movie_id) {
		_movie_id = movie_id;
	}

	@JSON
	@Override
	public long getCity_id() {
		return _city_id;
	}

	@Override
	public void setCity_id(long city_id) {
		_city_id = city_id;
	}

	@Override
	public Movies_City toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Movies_City>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Movies_CityImpl movies_CityImpl = new Movies_CityImpl();

		movies_CityImpl.setMovie_id(getMovie_id());
		movies_CityImpl.setCity_id(getCity_id());

		movies_CityImpl.resetOriginalValues();

		return movies_CityImpl;
	}

	@Override
	public int compareTo(Movies_City movies_City) {
		Movies_CityPK primaryKey = movies_City.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Movies_City)) {
			return false;
		}

		Movies_City movies_City = (Movies_City)object;

		Movies_CityPK primaryKey = movies_City.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Movies_City> toCacheModel() {
		Movies_CityCacheModel movies_CityCacheModel =
			new Movies_CityCacheModel();

		movies_CityCacheModel.movies_CityPK = getPrimaryKey();

		movies_CityCacheModel.movie_id = getMovie_id();

		movies_CityCacheModel.city_id = getCity_id();

		return movies_CityCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Movies_City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Movies_City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Movies_City, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Movies_City)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Movies_City, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Movies_City, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Movies_City, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Movies_City)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Movies_City>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _movie_id;
	private long _city_id;
	private Movies_City _escapedModel;

}